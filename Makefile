# set default shell
SHELL = bash -e -o pipefail

CMD_NAME           ?= tkube
RELEASE_NUMBER     ?= 1
RELEASE            ?= ${RELEASE_NUMBER}%{?dist}
ARCHITECTURE       ?= amd64
MAIL               ?= sezentunahan@outlook.com
HOMEPAGE           ?= https://github.com/tunahansezen
VERSION_SHORT      := $(shell cat VERSION)
VERSION_SHORT_RPM  := $(shell echo $(VERSION_SHORT) | sed 's/-//g')
VERSION            := tkube v${VERSION_SHORT}
DESCRIPTION        := Open-source tool for deploying Kubernetes clusters
LICENSE            := GPLv3+
DEB_DIR            := ${CMD_NAME}_${VERSION_SHORT}-${RELEASE_NUMBER}_${ARCHITECTURE}
RPM_DIR            := $(CURDIR)/rpmbuild
OUTPUT_DEB_FILE    := ${DEB_DIR}.deb
OUTPUT_RPM_FILE    := ${DEB_DIR}.rpm
BIN_DIR            := ${DEB_DIR}/usr/bin
CONTROL_FILE       := ${DEB_DIR}/DEBIAN/control
SPEC_FILE          := ${RPM_DIR}/SPECS/${CMD_NAME}.spec

APT_REPO_USER      ?=
APT_REPO_PASS      ?=
APT_REPO_STABLE    ?=

LDFLAGS            :=-ldflags "-X main.version=${VERSION_SHORT}"

GO                  = "go"
GO_JUNIT_REPORT     = "go-junit-report"
GOCOVER_COBERTURA   = "gocover-cobertura"
GOLANGCI_LINT       = "golangci-lint"


test: ## Run unit tests
	@mkdir -p ./tests/results
	@${GO} test -mod=vendor -v -coverprofile ./tests/results/go-test-coverage.out -covermode count ./... 2>&1 | tee ./tests/results/go-test-results.out ;\
	RETURN=$$? ;\
	${GO_JUNIT_REPORT} < ./tests/results/go-test-results.out > ./tests/results/go-test-results.xml ;\
	${GOCOVER_COBERTURA} < ./tests/results/go-test-coverage.out > ./tests/results/go-test-coverage.xml ;\
	exit $$RETURN

sca: ## Runs static code analysis with the golangci-lint tool
	@rm -rf ./sca-report
	@mkdir -p ./sca-report
	@echo "Running static code analysis..."
	@${GOLANGCI_LINT} run --deadline=6m --out-format junit-xml ./... | tee ./sca-report/sca-report.xml
	@echo ""
	@echo "Static code analysis OK"

deb: ## Creates debian file
	@echo DEB_DIR: ${DEB_DIR}
	@rm -rf ${DEB_DIR}
	@rm -f *.deb
	@mkdir -p "${DEB_DIR}"
	@mkdir -p "${DEB_DIR}/DEBIAN"
	@echo "Package: $(CMD_NAME)" >> ${CONTROL_FILE}
	@echo "Version: $(VERSION_SHORT)" >> ${CONTROL_FILE}
	@echo "Maintainer: $(MAIL)" >> ${CONTROL_FILE}
	@echo "Architecture: $(ARCHITECTURE)" >> ${CONTROL_FILE}
	@echo "Homepage: $(HOMEPAGE)" >> ${CONTROL_FILE}
	@echo "Description: $(VERSION)" >> ${CONTROL_FILE}
	@${GO} build ${LDFLAGS} -o ${CMD_NAME}
	@mkdir -p ${BIN_DIR}
	@mv ${CMD_NAME} ${BIN_DIR}
	@chmod a+x "${BIN_DIR}/${CMD_NAME}"
	@dpkg --build "${DEB_DIR}"
	@rm -rf "${DEB_DIR}"

rpm: ## Creates RPM file
	@echo "RPM_DIR: ${RPM_DIR}"
	@rm -rf ${RPM_DIR}
	@rm -f *.rpm
	@mkdir -p "${RPM_DIR}/SOURCES" "${RPM_DIR}/SPECS"
	@echo "Name: $(CMD_NAME)" > ${SPEC_FILE}
	@echo "Version: $(VERSION_SHORT_RPM)" >> ${SPEC_FILE}
	@echo "Release: $(RELEASE)" >> ${SPEC_FILE}
	@echo "Summary: $(DESCRIPTION)" >> ${SPEC_FILE}
	@echo "License: $(LICENSE)" >> ${SPEC_FILE}
	@echo "Source0: $(CMD_NAME)-$(VERSION_SHORT_RPM).tar.gz" >> ${SPEC_FILE}
	@echo "" >> ${SPEC_FILE}
	@echo "%description" >> ${SPEC_FILE}
	@echo "$(DESCRIPTION)" >> ${SPEC_FILE}
	@echo "" >> ${SPEC_FILE}
	@echo "%prep" >> ${SPEC_FILE}
	@echo "%setup -q" >> ${SPEC_FILE}
	@echo "" >> ${SPEC_FILE}
	@echo "%install" >> ${SPEC_FILE}
	@echo "rm -rf %{buildroot}" >> ${SPEC_FILE}
	@echo "mkdir -p %{buildroot}/usr/bin" >> ${SPEC_FILE}
	@echo "cp -a ${CMD_NAME} %{buildroot}/usr/bin/" >> ${SPEC_FILE}
	@echo "" >> ${SPEC_FILE}
	@echo "%files" >> ${SPEC_FILE}
	@echo "%{_bindir}/${CMD_NAME}" >> ${SPEC_FILE}
	@echo "" >> ${SPEC_FILE}
	@echo "%changelog" >> ${SPEC_FILE}
	@echo "* $(shell LANG=en_EN date '+%a %b %d %Y') ${USER} <${MAIL}> - ${VERSION_SHORT}-${RELEASE}" >> ${SPEC_FILE}
	@echo "- Initial RPM release" >> ${SPEC_FILE}
	@${GO} build ${LDFLAGS} -o ${CMD_NAME}
	@mkdir -p "${RPM_DIR}/BUILD/$(CMD_NAME)-$(VERSION_SHORT_RPM)/"
	@cp $(CMD_NAME) "${RPM_DIR}/BUILD/$(CMD_NAME)-$(VERSION_SHORT_RPM)/"
	@tar czf $(RPM_DIR)/SOURCES/$(CMD_NAME)-$(VERSION_SHORT_RPM).tar.gz -C "${RPM_DIR}/BUILD" "$(CMD_NAME)-$(VERSION_SHORT_RPM)"
	@rpmbuild --define "_topdir ${RPM_DIR}" -bb ${SPEC_FILE}
	@mv "${RPM_DIR}/RPMS/x86_64/"*.rpm .
	@rm -rf "${RPM_DIR}"

upload: check-vars deb ## Uploads created deb file to apt repository
	@curl -u "${NEXUS_REPO_USER}:${NEXUS_REPO_PASS}" -X POST -H "Content-Type: multipart/form-data" \
          --data-binary "@./${OUTPUT_DEB_FILE}" "${APT_REPO_STABLE}"
	@rm -f "${OUTPUT_DEB_FILE}"

mod-update: ## Update go mod files
	${GO} mod tidy
	${GO} mod vendor

clean: dist-clean ## Removes any local filesystem artifacts generated by a build
	rm -f ./*.deb

dist-clean: ## Removes any local filesystem artifacts generated by a build or test run
	rm -rf ./sca-report
	rm -rf ./tests

check-vars: ## Check required parameters
ifndef APT_REPO_USER
	$(error APT_REPO_USER is undefined)
endif
ifndef APT_REPO_PASS
	$(error APT_REPO_PASS is undefined)
endif
ifndef APT_REPO_STABLE
	$(error APT_REPO_STABLE is undefined)
endif